import _extends from 'babel-runtime/helpers/extends';
import React from 'react';
import ReactDOM from 'react-dom';
import createReactClass from 'create-react-class';
import Dialog from './Dialog';
import getContainerRenderMixin from 'rc-util/es/getContainerRenderMixin';
import Portal from 'rc-util/es/Portal';
var IS_REACT_16 = !!ReactDOM.createPortal;
var mixins = [];
if (!IS_REACT_16) {
    mixins.push(getContainerRenderMixin({
        isVisible: function isVisible(instance) {
            return instance.props.visible;
        },

        autoDestroy: false,
        getContainer: function getContainer(instance) {
            return instance.getContainer();
        }
    }));
}
;
var DialogWrap = createReactClass({
    displayName: 'DialogWrap',
    mixins: mixins,
    getDefaultProps: function getDefaultProps() {
        return {
            visible: false
        };
    },
    shouldComponentUpdate: function shouldComponentUpdate(_ref) {
        var visible = _ref.visible;

        return !!(this.props.visible || visible);
    },
    componentWillUnmount: function componentWillUnmount() {
        if (IS_REACT_16) {
            return;
        }
        if (this.props.visible) {
            this.renderComponent({
                afterClose: this.removeContainer,
                onClose: function onClose() {},

                visible: false
            });
        } else {
            this.removeContainer();
        }
    },
    saveDialog: function saveDialog(node) {
        this._component = node;
    },
    getComponent: function getComponent(extra) {
        return React.createElement(Dialog, _extends({ ref: this.saveDialog }, this.props, extra, { key: "dialog" }));
    },
    getContainer: function getContainer() {
        if (this.props.getContainer) {
            return this.props.getContainer();
        }
        var container = document.createElement('div');
        document.body.appendChild(container);
        return container;
    },
    render: function render() {
        var visible = this.props.visible;

        var portal = null;
        if (!IS_REACT_16) {
            return portal;
        }
        if (visible || this._component) {
            portal = React.createElement(Portal, { getContainer: this.getContainer }, this.getComponent());
        }
        return portal;
    }
});
export default DialogWrap;